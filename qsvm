class SVM:
  def __init__(self):
    pass

class QSVM:
  def __init(self):
    pass

  @staticmethod
  def qt(state_vec, draw=False):
      qc.initialize(state_vec, 2)
      # hadmard gate on qubit 1
      qc.h(1)
      # Perform a controlled-X gate on qubit 1, controlled by qubit 0
      qc.cx(1, 0)
      # Perform a controlled-X gate on qubit 2, controlled by quit 1
      qc.cx(2, 1)
      # hadmard gate on qubit 2
      qc.h(2)
      # Perform a controlled-X gate on qubit 1, controlled by qubit 0
      qc.cx(1, 0)
      qc.cz(0,2)
  
      qc.measure(1, 1)
      qc.measure(2, 2)
  
      # if qubit 1 is 1, preform x gate, if qubit 2 is 1, preform z gate
      qc.x(0).c_if(1,1)
      qc.z(0).c_if(2,1)
  
      if draw:
          display(qc.draw(output='mpl', style='bw'))

    # get results
    simulator = BasicAer.get_backend('statevector_simulator')
    job = execute(qc, simulator)
    result = job.result()
    return result.get_statevector()
